package com.xyz0751.learn.leetcode.hash;

import java.util.HashSet;
import java.util.Set;

/**
 * 36. 有效的数独
 *
 * 难度 中等
 *
 * 请你判断一个9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 *
 * 数字1-9在每一行只能出现一次。
 * 数字1-9在每一列只能出现一次。
 * 数字1-9在每一个以粗实线分隔的3x3宫内只能出现一次。（请参考示例图）
 * 
 *
 * 注意：
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 空白格用'.'表示。
 * 
 *
 * 示例 1：
 *
 *
 * 输入：board = 
 * [['5','3','.','.','7','.','.','.','.']
 * ,['6','.','.','1','9','5','.','.','.']
 * ,['.','9','8','.','.','.','.','6','.']
 * ,['8','.','.','.','6','.','.','.','3']
 * ,['4','.','.','8','.','3','.','.','1']
 * ,['7','.','.','.','2','.','.','.','6']
 * ,['.','6','.','.','.','.','2','8','.']
 * ,['.','.','.','4','1','9','.','.','5']
 * ,['.','.','.','.','8','.','.','7','9']]
 * 输出：true
 * 示例 2：
 *
 * 输入：board = 
 * [['8','3','.','.','7','.','.','.','.']
 * ,['6','.','.','1','9','5','.','.','.']
 * ,['.','9','8','.','.','.','.','6','.']
 * ,['8','.','.','.','6','.','.','.','3']
 * ,['4','.','.','8','.','3','.','.','1']
 * ,['7','.','.','.','2','.','.','.','6']
 * ,['.','6','.','.','.','.','2','8','.']
 * ,['.','.','.','4','1','9','.','.','5']
 * ,['.','.','.','.','8','.','.','7','9']]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 
 *
 * 提示：
 *
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字（1-9）或者 '.'
 *
 * @author 力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/valid-sudoku
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class IsValidSudoku {
    public boolean isValidSudoku(char[][] board) {
        Set<Character>[] sets = new Set[27];
        for (int i=0; i<board.length; i++) {
            for (int j=0; j<board[i].length; j++) {
                if (board[i][j] == '.') {
                    continue;
                }
                if (sets[i] == null) {
                    sets[i] = new HashSet<>();
                }

                if (sets[i].contains(board[i][j])) {
                    return false;
                } else {
                    sets[i].add(board[i][j]);
                }

                if (sets[9+j] == null) {
                    sets[9+j] = new HashSet<>();
                }
                if (sets[9+j].contains(board[i][j])) {
                    return false;
                } else {
                    sets[9+j].add(board[i][j]);
                }

                if (sets[18+i/3+j/3*3] == null) {
                    sets[18+i/3+j/3*3] = new HashSet<>();
                }
                if (sets[18+i/3+j/3*3].contains(board[i][j])) {
                    return false;
                } else {
                    sets[18+i/3+j/3*3].add(board[i][j]);
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        IsValidSudoku algo = new IsValidSudoku();
        System.out.println(algo.isValidSudoku(new char[][]{{'5','3','.','.','7','.','.','.','.'}
            ,{'6','.','.','1','9','5','.','.','.'}
            ,{'.','9','8','.','.','.','.','6','.'}
            ,{'8','.','.','.','6','.','.','.','3'}
            ,{'4','.','.','8','.','3','.','.','1'}
            ,{'7','.','.','.','2','.','.','.','6'}
            ,{'.','6','.','.','.','.','2','8','.'}
            ,{'.','.','.','4','1','9','.','.','5'}
            ,{'.','.','.','.','8','.','.','7','9'}}));
    }
}
